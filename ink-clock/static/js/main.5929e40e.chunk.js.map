{"version":3,"sources":["Num.tsx","Clock.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Num","React","forwardRef","props","ref","className","number","Clock","useState","Date","time","setTime","useEffect","timerID","timeChanger","window","setTimeout","clearTimeout","toTimeString","substring","split","map","n","i","App","Math","min","innerHeight","innerWidth","fontSize","setFontSize","fontWeight","setFontWeight","max","maxSize","setMaxSize","color","setColor","rotate","setRotate","mainEl","useRef","numEl","fontSizeChanger","el","current","isVertical","getComputedStyle","replace","widthRatio","offsetWidth","heightRatio","offsetHeight","fontSizeRatio","addEventListener","removeEventListener","fontWeightChanger","isAdd","id","style","width","height","lineHeight","marginTop","marginLeft","transform","onClick","document","fullscreenElement","requestFullscreen","exitFullscreen","newDeg","console","log","rotateClock","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.5929e40e.chunk.js","sourcesContent":["import React from 'react'\r\ninterface props {\r\n  number:string\r\n}\r\nconst Num = React.forwardRef((props:props, ref: React.Ref<HTMLDivElement>)=>{\r\n  return (<span className=\"num\" ref={ref?ref:null}>\r\n    {props.number}\r\n  </span>)\r\n})\r\nexport default Num","import React, {useState, useEffect, Fragment} from 'react'\r\nimport Num from './Num'\r\n\r\nconst Clock = React.forwardRef((props, ref: React.Ref<HTMLDivElement>)=>{\r\n  const [time, setTime] = useState(new Date())\r\n  useEffect(()=>{\r\n    const timeChanger = ()=>{\r\n      const time = new Date()\r\n      setTime(time)\r\n      return window.setTimeout(timeChanger, 6e4-(+time%6e4))\r\n    }\r\n    const timerID = timeChanger()\r\n    return ()=>{window.clearTimeout(timerID)}\r\n  }, [])\r\n  return (\r\n    <Fragment>\r\n      {time.toTimeString().substring(0,5).split('').map((n,i)=><Num number={n} key={i} ref={ref} />)}\r\n    </Fragment>\r\n    )\r\n})\r\nexport default Clock","import React, {useState, useEffect, useRef} from 'react'\r\nimport Clock from './Clock';\r\n\r\nfunction App(){\r\n  const [fontSize, setFontSize] = useState(()=>Math.min(window.innerHeight/2, window.innerWidth/6)+'px')\r\n  const [fontWeight, setFontWeight] = useState(400)\r\n  const [maxSize, setMaxSize] = useState(()=>Math.max(window.innerWidth, window.innerHeight))\r\n  const [color, setColor] = useState('rgba(255, 255, 255, 0)')\r\n  const [rotate, setRotate] = useState(0)\r\n  const mainEl = useRef(null);\r\n  const numEl = useRef(null);\r\n  useEffect(()=>{\r\n    const fontSizeChanger = ()=>{\r\n      let el:null|HTMLElement = numEl.current\r\n      if(!el) return\r\n      const isVertical = rotate/90%2\r\n      const fontSize = +window.getComputedStyle(el).fontSize.replace('px', '')\r\n      const widthRatio = 0.98*(isVertical ? window.innerHeight : window.innerWidth) / ((el as HTMLElement).offsetWidth*5)\r\n      const heightRatio = 0.98*(isVertical ? window.innerWidth : window.innerHeight) / (el as HTMLElement).offsetHeight\r\n      const fontSizeRatio = Math.min( widthRatio, heightRatio )\r\n      setFontSize(fontSize*fontSizeRatio+'px')\r\n      setMaxSize(Math.max(window.innerWidth, window.innerHeight))\r\n    }\r\n    fontSizeChanger()\r\n    setColor('black')\r\n    window.addEventListener('resize', fontSizeChanger)\r\n    return ()=>{\r\n      window.removeEventListener('resize', fontSizeChanger)\r\n    }\r\n  },[rotate])\r\n  const fontWeightChanger = (isAdd:boolean | null=true)=>{\r\n    if(isAdd){\r\n      if(fontWeight>=900) return\r\n      setFontWeight(fontWeight+100)\r\n      return\r\n    }\r\n    if(fontWeight<=100) return\r\n    setFontWeight(fontWeight-100)\r\n  }\r\n  const fullScreen = ()=>{\r\n    if (!document.fullscreenElement && mainEl.current) {\r\n      (mainEl.current as unknown as HTMLElement).requestFullscreen();\r\n    } else {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      }\r\n    }\r\n  }\r\n  const rotateClock = ()=>{\r\n    let newDeg = rotate >= 270 ? 0 : rotate+90\r\n    console.log(newDeg)\r\n    setRotate(newDeg)\r\n  }\r\n  return (\r\n    <div id=\"main\" style={{fontSize, fontWeight, color}} ref={mainEl}>\r\n      <div id=\"clock\" style={{\r\n        width: maxSize+'px',\r\n        height: maxSize+'px',\r\n        lineHeight: maxSize+'px',\r\n        marginTop: -(maxSize-window.innerHeight)/2+'px',\r\n        marginLeft: -(maxSize-window.innerWidth)/2+'px',\r\n        transform: 'rotate('+rotate+'deg)'\r\n      }}>\r\n        <Clock ref={numEl} />\r\n      </div>\r\n      <div className=\"trigger trigger-top-left\" onClick={()=>{fullScreen()}}></div>\r\n      <div className=\"trigger trigger-top-right\" onClick={()=>{rotateClock()}}></div>\r\n      <div className=\"trigger trigger-bottom-left\" onClick={()=>{fontWeightChanger(false)}}></div>\r\n      <div className=\"trigger trigger-bottom-right\" onClick={()=>{fontWeightChanger()}}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// class App extends React.Component<Props, State, {}> {\r\n//   constructor(props: Props | Readonly<Props>){\r\n//     super(props)\r\n//     this.state = {\r\n//       fontWeight: 400,\r\n//       fontSize: '1000px'\r\n//     }\r\n//     this.fontSizeChanger = this.fontSizeChanger.bind(this)\r\n//     this.fontWeightChanger = this.fontWeightChanger.bind(this)\r\n//   }\r\n//   fontSizeChanger(){\r\n//     let el = document.querySelector('.num')\r\n//     if(!el) return\r\n//     el = el as unknown as HTMLElement\r\n//     const fontSize = +window.getComputedStyle(el).fontSize.replace('px', '')\r\n//     const widthRatio = 0.98*window.innerWidth / ((el as HTMLElement).offsetWidth*5)\r\n//     const heightRatio = 0.98*window.innerHeight / (el as HTMLElement).offsetHeight\r\n//     const fontSizeRatio = Math.min( widthRatio, heightRatio )\r\n//     this.setState({fontSize: fontSize*fontSizeRatio+'px'})\r\n//   }\r\n//   fontWeightChanger(isAdd:boolean | null=true){\r\n//     if(isAdd){\r\n//       if(this.state.fontWeight>=900) return\r\n//       this.setState({fontWeight: this.state.fontWeight+100})\r\n//       return\r\n//     }\r\n//     if(this.state.fontWeight<=100) return\r\n//     this.setState({fontWeight: this.state.fontWeight-100})\r\n//   }\r\n//   fullScreen(){\r\n//     if (!document.fullscreenElement) {\r\n//       (document.querySelector('#clock') as HTMLElement).requestFullscreen();\r\n//     } else {\r\n//       if (document.exitFullscreen) {\r\n//         document.exitFullscreen();\r\n//       }\r\n//     }\r\n//   }\r\n//   componentDidMount(){\r\n//     this.fontSizeChanger()\r\n//     window.addEventListener('resize', this.fontSizeChanger)\r\n//   }\r\n//   render(){\r\n//     return (<div id=\"clock\" style={{fontSize: this.state.fontSize, fontWeight: this.state.fontWeight}}>\r\n//       <Clock />\r\n//       <div className=\"trigger trigger-top-left\" onClick={()=>{this.fullScreen()}}></div>\r\n//       <div className=\"trigger trigger-bottom-left\" onClick={()=>{this.fontWeightChanger(false)}}></div>\r\n//       <div className=\"trigger trigger-bottom-right\" onClick={()=>{this.fontWeightChanger()}}></div>\r\n//     </div>)\r\n//   }\r\n// }\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}