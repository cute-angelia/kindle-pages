{"version":3,"sources":["Num.tsx","Clock.tsx","App.tsx","index.js"],"names":["Num","React","forwardRef","props","ref","className","number","Clock","useState","Date","time","setTime","useEffect","timerID","timeChanger","window","setTimeout","clearTimeout","toTimeString","substring","split","map","n","i","App","Math","min","innerHeight","innerWidth","fontSize","setFontSize","fontWeight","setFontWeight","max","maxSize","setMaxSize","color","setColor","rotate","setRotate","mainEl","useRef","numEl","fontSizeChanger","el","current","isVertical","getComputedStyle","replace","widthRatio","offsetWidth","heightRatio","offsetHeight","fontSizeRatio","addEventListener","removeEventListener","fontWeightChanger","isAdd","id","style","width","height","lineHeight","marginTop","marginLeft","transform","onClick","document","fullscreenElement","requestFullscreen","exitFullscreen","newDeg","console","log","rotateClock","ReactDOM","render","StrictMode","getElementById"],"mappings":"qOASeA,EALHC,IAAMC,YAAW,SAACC,EAAaC,GACzC,OAAQ,sBAAMC,UAAU,MAAMD,IAAKA,GAAQ,KAAnC,SACLD,EAAMG,YCcIC,EAjBDN,IAAMC,YAAW,SAACC,EAAOC,GAAkC,IAAD,EAC9CI,mBAAS,IAAIC,MADiC,mBAC/DC,EAD+D,KACzDC,EADyD,KAWtE,OATAC,qBAAU,WACR,IAKMC,EALc,SAAdC,IACJ,IAAMJ,EAAO,IAAID,KAEjB,OADAE,EAAQD,GACDK,OAAOC,WAAWF,EAAa,KAAMJ,EAAK,KAEnCI,GAChB,OAAO,WAAKC,OAAOE,aAAaJ,MAC/B,IAED,cAAC,WAAD,UACGH,EAAKQ,eAAeC,UAAU,EAAE,GAAGC,MAAM,IAAIC,KAAI,SAACC,EAAEC,GAAH,OAAO,cAAC,EAAD,CAAKjB,OAAQgB,EAAWlB,IAAKA,GAARmB,WC6GrEC,MA1Hf,WAAe,IAAD,EACoBhB,oBAAS,kBAAIiB,KAAKC,IAAIX,OAAOY,YAAY,EAAGZ,OAAOa,WAAW,GAAG,QADrF,mBACLC,EADK,KACKC,EADL,OAEwBtB,mBAAS,KAFjC,mBAELuB,EAFK,KAEOC,EAFP,OAGkBxB,oBAAS,kBAAIiB,KAAKQ,IAAIlB,OAAOa,WAAYb,OAAOY,gBAHlE,mBAGLO,EAHK,KAGIC,EAHJ,OAIc3B,mBAAS,0BAJvB,mBAIL4B,EAJK,KAIEC,EAJF,OAKgB7B,mBAAS,GALzB,mBAKL8B,EALK,KAKGC,EALH,KAMNC,EAASC,iBAAO,MAChBC,EAAQD,iBAAO,MACrB7B,qBAAU,WACR,IAAM+B,EAAkB,WACtB,IAAIC,EAAsBF,EAAMG,QAChC,GAAID,EAAJ,CACA,IAAME,EAAaR,EAAO,GAAG,EACvBT,GAAYd,OAAOgC,iBAAiBH,GAAIf,SAASmB,QAAQ,KAAM,IAC/DC,EAAa,KAAMH,EAAa/B,OAAOY,YAAcZ,OAAOa,aAA+C,EAA/BgB,EAAmBM,aAC/FC,EAAc,KAAML,EAAa/B,OAAOa,WAAab,OAAOY,aAAgBiB,EAAmBQ,aAC/FC,EAAgB5B,KAAKC,IAAKuB,EAAYE,GAC5CrB,EAAYD,EAASwB,EAAc,MACnClB,EAAWV,KAAKQ,IAAIlB,OAAOa,WAAYb,OAAOY,gBAKhD,OAHAgB,IACAN,EAAS,SACTtB,OAAOuC,iBAAiB,SAAUX,GAC3B,WACL5B,OAAOwC,oBAAoB,SAAUZ,MAEvC,CAACL,IACH,IAAMkB,EAAoB,WAA8B,IAA7BC,IAA4B,yDACrD,GAAGA,EAAH,CACE,GAAG1B,GAAY,IAAK,OACpBC,EAAcD,EAAW,UAGxBA,GAAY,KACfC,EAAcD,EAAW,MAgB3B,OACE,sBAAK2B,GAAG,OAAOC,MAAO,CAAC9B,WAAUE,aAAYK,SAAQhC,IAAKoC,EAA1D,UACE,qBAAKkB,GAAG,QAAQC,MAAO,CACrBC,MAAO1B,EAAQ,KACf2B,OAAQ3B,EAAQ,KAChB4B,WAAY5B,EAAQ,KACpB6B,YAAa7B,EAAQnB,OAAOY,aAAa,EAAE,KAC3CqC,aAAc9B,EAAQnB,OAAOa,YAAY,EAAE,KAC3CqC,UAAW,UAAU3B,EAAO,QAN9B,SAQE,cAAC,EAAD,CAAOlC,IAAKsC,MAEd,qBAAKrC,UAAU,2BAA2B6D,QAAS,YAzBhDC,SAASC,mBAAqB5B,EAAOK,QACvCL,EAAOK,QAAmCwB,oBAEvCF,SAASG,gBACXH,SAASG,oBAsBX,qBAAKjE,UAAU,4BAA4B6D,QAAS,YAlBpC,WAClB,IAAIK,EAASjC,GAAU,IAAM,EAAIA,EAAO,GACxCkC,QAAQC,IAAIF,GACZhC,EAAUgC,GAeiDG,MACzD,qBAAKrE,UAAU,8BAA8B6D,QAAS,WAAKV,GAAkB,MAC7E,qBAAKnD,UAAU,+BAA+B6D,QAAS,WAAKV,WC9DlEmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFV,SAASW,eAAe,W","file":"static/js/main.9c875879.chunk.js","sourcesContent":["import React from 'react'\r\ninterface props {\r\n  number:string\r\n}\r\nconst Num = React.forwardRef((props:props, ref: React.Ref<HTMLDivElement>)=>{\r\n  return (<span className=\"num\" ref={ref?ref:null}>\r\n    {props.number}\r\n  </span>)\r\n})\r\nexport default Num","import React, {useState, useEffect, Fragment} from 'react'\r\nimport Num from './Num'\r\n\r\nconst Clock = React.forwardRef((props, ref: React.Ref<HTMLDivElement>)=>{\r\n  const [time, setTime] = useState(new Date())\r\n  useEffect(()=>{\r\n    const timeChanger = ()=>{\r\n      const time = new Date()\r\n      setTime(time)\r\n      return window.setTimeout(timeChanger, 6e4-(+time%6e4))\r\n    }\r\n    const timerID = timeChanger()\r\n    return ()=>{window.clearTimeout(timerID)}\r\n  }, [])\r\n  return (\r\n    <Fragment>\r\n      {time.toTimeString().substring(0,5).split('').map((n,i)=><Num number={n} key={i} ref={ref} />)}\r\n    </Fragment>\r\n    )\r\n})\r\nexport default Clock","import React, {useState, useEffect, useRef} from 'react'\r\nimport Clock from './Clock';\r\n\r\nfunction App(){\r\n  const [fontSize, setFontSize] = useState(()=>Math.min(window.innerHeight/2, window.innerWidth/6)+'px')\r\n  const [fontWeight, setFontWeight] = useState(400)\r\n  const [maxSize, setMaxSize] = useState(()=>Math.max(window.innerWidth, window.innerHeight))\r\n  const [color, setColor] = useState('rgba(255, 255, 255, 0)')\r\n  const [rotate, setRotate] = useState(0)\r\n  const mainEl = useRef(null);\r\n  const numEl = useRef(null);\r\n  useEffect(()=>{\r\n    const fontSizeChanger = ()=>{\r\n      let el:null|HTMLElement = numEl.current\r\n      if(!el) return\r\n      const isVertical = rotate/90%2\r\n      const fontSize = +window.getComputedStyle(el).fontSize.replace('px', '')\r\n      const widthRatio = 0.98*(isVertical ? window.innerHeight : window.innerWidth) / ((el as HTMLElement).offsetWidth*5)\r\n      const heightRatio = 0.98*(isVertical ? window.innerWidth : window.innerHeight) / (el as HTMLElement).offsetHeight\r\n      const fontSizeRatio = Math.min( widthRatio, heightRatio )\r\n      setFontSize(fontSize*fontSizeRatio+'px')\r\n      setMaxSize(Math.max(window.innerWidth, window.innerHeight))\r\n    }\r\n    fontSizeChanger()\r\n    setColor('black')\r\n    window.addEventListener('resize', fontSizeChanger)\r\n    return ()=>{\r\n      window.removeEventListener('resize', fontSizeChanger)\r\n    }\r\n  },[rotate])\r\n  const fontWeightChanger = (isAdd:boolean | null=true)=>{\r\n    if(isAdd){\r\n      if(fontWeight>=900) return\r\n      setFontWeight(fontWeight+100)\r\n      return\r\n    }\r\n    if(fontWeight<=100) return\r\n    setFontWeight(fontWeight-100)\r\n  }\r\n  const fullScreen = ()=>{\r\n    if (!document.fullscreenElement && mainEl.current) {\r\n      (mainEl.current as unknown as HTMLElement).requestFullscreen();\r\n    } else {\r\n      if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n      }\r\n    }\r\n  }\r\n  const rotateClock = ()=>{\r\n    let newDeg = rotate >= 270 ? 0 : rotate+90\r\n    console.log(newDeg)\r\n    setRotate(newDeg)\r\n  }\r\n  return (\r\n    <div id=\"main\" style={{fontSize, fontWeight, color}} ref={mainEl}>\r\n      <div id=\"clock\" style={{\r\n        width: maxSize+'px',\r\n        height: maxSize+'px',\r\n        lineHeight: maxSize+'px',\r\n        marginTop: -(maxSize-window.innerHeight)/2+'px',\r\n        marginLeft: -(maxSize-window.innerWidth)/2+'px',\r\n        transform: 'rotate('+rotate+'deg)'\r\n      }}>\r\n        <Clock ref={numEl} />\r\n      </div>\r\n      <div className=\"trigger trigger-top-left\" onClick={()=>{fullScreen()}}></div>\r\n      <div className=\"trigger trigger-top-right\" onClick={()=>{rotateClock()}}></div>\r\n      <div className=\"trigger trigger-bottom-left\" onClick={()=>{fontWeightChanger(false)}}></div>\r\n      <div className=\"trigger trigger-bottom-right\" onClick={()=>{fontWeightChanger()}}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// class App extends React.Component<Props, State, {}> {\r\n//   constructor(props: Props | Readonly<Props>){\r\n//     super(props)\r\n//     this.state = {\r\n//       fontWeight: 400,\r\n//       fontSize: '1000px'\r\n//     }\r\n//     this.fontSizeChanger = this.fontSizeChanger.bind(this)\r\n//     this.fontWeightChanger = this.fontWeightChanger.bind(this)\r\n//   }\r\n//   fontSizeChanger(){\r\n//     let el = document.querySelector('.num')\r\n//     if(!el) return\r\n//     el = el as unknown as HTMLElement\r\n//     const fontSize = +window.getComputedStyle(el).fontSize.replace('px', '')\r\n//     const widthRatio = 0.98*window.innerWidth / ((el as HTMLElement).offsetWidth*5)\r\n//     const heightRatio = 0.98*window.innerHeight / (el as HTMLElement).offsetHeight\r\n//     const fontSizeRatio = Math.min( widthRatio, heightRatio )\r\n//     this.setState({fontSize: fontSize*fontSizeRatio+'px'})\r\n//   }\r\n//   fontWeightChanger(isAdd:boolean | null=true){\r\n//     if(isAdd){\r\n//       if(this.state.fontWeight>=900) return\r\n//       this.setState({fontWeight: this.state.fontWeight+100})\r\n//       return\r\n//     }\r\n//     if(this.state.fontWeight<=100) return\r\n//     this.setState({fontWeight: this.state.fontWeight-100})\r\n//   }\r\n//   fullScreen(){\r\n//     if (!document.fullscreenElement) {\r\n//       (document.querySelector('#clock') as HTMLElement).requestFullscreen();\r\n//     } else {\r\n//       if (document.exitFullscreen) {\r\n//         document.exitFullscreen();\r\n//       }\r\n//     }\r\n//   }\r\n//   componentDidMount(){\r\n//     this.fontSizeChanger()\r\n//     window.addEventListener('resize', this.fontSizeChanger)\r\n//   }\r\n//   render(){\r\n//     return (<div id=\"clock\" style={{fontSize: this.state.fontSize, fontWeight: this.state.fontWeight}}>\r\n//       <Clock />\r\n//       <div className=\"trigger trigger-top-left\" onClick={()=>{this.fullScreen()}}></div>\r\n//       <div className=\"trigger trigger-bottom-left\" onClick={()=>{this.fontWeightChanger(false)}}></div>\r\n//       <div className=\"trigger trigger-bottom-right\" onClick={()=>{this.fontWeightChanger()}}></div>\r\n//     </div>)\r\n//   }\r\n// }\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}